Author: 1. Anuraag Motiwale   asmotiwa@ncsu.edu
        2. Abhishek Singh     aksingh5@ncsu.edu

Project: Free Launch - Optimizing Dynamic Kernel Launches In GPU Through Thread Reuse

This is the Readme file.

Folder Contents:
1. asmotiwa_aksingh5_report.pdf - Detailed report about the project.

2. CC_Project -
      i. Cuda_code: This folder contains the header files required to compile the CUDA program
                    and it also contains the test cases as well as the output folders for the
                    CUDA code. This folder contains the following files and folders:
                          a. cub-1.7.4: Library required to compile the CUDA benchmark code
                          b. lonestargpu-2.0: Library required to compile the CUDA benchmark code
                          c. mst_dp_modular: It contains the file "main.cu" which is the benchmark code
                                             for the tool containing dynamic subkernel calls. The
                                             program is a minimum spanning tree program. The output of 
					     the "main.cu" program is found in REF_RESULTS file.
                          d. mst_dp_T1_modular: This folder contains the output generated by the tool after
                                                first transformation as "main.cu". The output of 
					     the "main.cu" program is found in REF_RESULTS file.
                          e. mst_dp_T2_modular: This folder contains the output generated by the tool after
                                                second transformation as "main.cu".The output of 
					     the "main.cu" program is found in REF_RESULTS file.
                          d. mst_dp_T3_modular: This folder contains the output generated by the tool after
                                                third transformation as "main.cu". The output of 
					     the "main.cu" program is found in REF_RESULTS file.
                          e. mst_dp_T4_modular: This folder contains the output generated by the tool after
                                                fourth transformation as "main.cu". The output of 
					     the "main.cu" program is found in REF_RESULTS file.

      ii. transformation1: Contains the source code "T1.cpp" for the tool responsible for first transformation.

      iii. transformation2: Contains the source code "T2.cpp" for the tool responsible for second transformation.

      iv. transformation3: Contains the source code "T3.cpp" for the tool responsible for third transformation.

      v. transformation4: Contains the source code "T4.cpp" for the tool responsible for fourth transformation.

      vi. test.sh: Test file to build and run the clang tool required for the free launch transformations.
                    The test files contains the automation script which involves moving the source code for clang tool
                    inside the appropriate clang directory and building the respective tools and running the clang tools
                    generated for the benchmark.
	
      vii. TransformedCudaCodes: This folder contains the transformed CUDA codes for the original most benchmark.
		    a. main1.cu: First Transformation code for original mst benchmark.
		    b. main2.cu: Second Transformation code for original mst benchmark.
		    c. main3.cu: Third Transformation code for original mst benchmark.
		    d. main4.cu: Fourth Transformation code for original mst benchmark.

3. README.txt: Readme file


Please follow the below instructions to build the clang tool to perform 4 transformations
to optimize the dynamic kernel launches in GPU through thread reuse:

1. Please extract the folder "CC_Project" in the "/home/ubuntu/" directory.
2. Open the terminal and type the command "cd /home/ubuntu/CC_Project".
3. Then type the command "chmod +x test.sh".
4. Now type "./test.sh" to run the test script to move, build and run the clang tools developed.
5. You can find the binary files generated for the tools for each transformation in the
    "/home/ubuntu/llvm/build-release/bin" folder. The binary files are present inside the respective folders named
    as - "transformation1", "transformation2", "transformation3", and "transformation4".
6. The output code for each transformation will be generated inside the "/home/ubuntu/CC_Project/Cuda_code/" inside each
   of the "mst_dp_T*_modular" folders as a "main.cu" file. You will get 4 cuda files as final output for each transformations.
7. You can also run the generated cuda code transformations on a GPU accessible machine to get the same results as that of the
   original benchmark cuda code. To compile and run GPU programs with dynamic parallelism, you need to use a GPU node with a
   higher computation capability. Use the following nodes for running the cuda code:
              i.   2  nodes with nVidia GTX Titan X: nodes c[74,76-77], queue: -p gtxtitanx
              ii.  2 node with nVidia GTX 1080: nodes c[44,47], queue: -p gtx1080
              iii. 1 node with nVidia Titan X: node c50, queue: -p titanx
